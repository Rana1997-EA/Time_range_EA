#property copyright "Copyright 2025, Digvijay Singh"
#property link      "https://www.mql5.com"
#property version   "1.00"

//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
input group "==== Range Inputs ===="
input int InpRangeStart = 1425;       // Start time in minutes (14:25)
input int InpRangeDuration = 15;      // Duration in minutes (15 minutes)
input int InpRangeClose = 1420;       // Close time in minutes (14:20)

input group "==== Day of Week Filter ===="
input bool InpMonday = true;          // Range on Monday
input bool InpTuesday = true;         // Range on Tuesday
input bool InpWednesday = true;       // Range on Wednesday
input bool InpThursday = true;        // Range on Thursday
input bool InpFriday = true;          // Range on Friday

//+------------------------------------------------------------------+
//| GLOBAL VARIABLES                                                 |
//+------------------------------------------------------------------+
struct RANGE_STRUCT {
   datetime start_time;    // Start of the range
   datetime end_time;      // End of the range
   datetime close_time;    // Close time
   double high;            // High of the range
   double low;             // Low of the range
   bool f_entry;           // Flag if we are inside the range
};

RANGE_STRUCT range;
MqlTick lastTick;

//+------------------------------------------------------------------+
//| Expert Initialization Function                                   |
//+------------------------------------------------------------------+
int OnInit() {
   // Check user inputs
   if (!CheckInputs()) { return INIT_PARAMETERS_INCORRECT; }

   // Calculate new range
   CalculateRange();

   // Draw objects
   DrawObjects();

   return (INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert Deinitialization Function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
   // Delete objects
   ObjectsDeleteAll(NULL, "range");
}

//+------------------------------------------------------------------+
//| Expert Tick Function                                             |
//+------------------------------------------------------------------+
void OnTick() {
   // Get current tick
   SymbolInfoTick(_Symbol, lastTick);

   // Range calculation
   if (lastTick.time >= range.start_time && lastTick.time < range.end_time) {
      // Set flag
      range.f_entry = true;

      // New high
      if (lastTick.ask > range.high) {
         range.high = lastTick.ask;
         DrawObjects();
      }
      // New low
      if (lastTick.bid < range.low) {
         range.low = lastTick.bid;
         DrawObjects();
      }
   }

   // Reset range after close time
   if (InpRangeClose >= 0 && lastTick.time >= range.close_time) {
      CalculateRange();
      DrawObjects();
   }
}

//+------------------------------------------------------------------+
//| Draw chart objects                                               |
//+------------------------------------------------------------------+
void DrawObjects() {
   // Start time
   ObjectDelete(NULL, "range start");
   if (range.start_time > 0) {
      ObjectCreate(NULL, "range start", OBJ_VLINE, 0, range.start_time, 0);
      ObjectSetString(NULL, "range start", OBJPROP_TOOLTIP, "Start of the range \n" + TimeToString(range.start_time, TIME_DATE | TIME_MINUTES));
      ObjectSetInteger(NULL, "range start", OBJPROP_COLOR, clrBlue);
      ObjectSetInteger(NULL, "range start", OBJPROP_WIDTH, 2);
      ObjectSetInteger(NULL, "range start", OBJPROP_BACK, true);
   }

   // End time
   ObjectDelete(NULL, "range end");
   if (range.end_time > 0) {
      ObjectCreate(NULL, "range end", OBJ_VLINE, 0, range.end_time, 0);
      ObjectSetString(NULL, "range end", OBJPROP_TOOLTIP, "End of the range \n" + TimeToString(range.end_time, TIME_DATE | TIME_MINUTES));
      ObjectSetInteger(NULL, "range end", OBJPROP_COLOR, clrBlue);
      ObjectSetInteger(NULL, "range end", OBJPROP_WIDTH, 2);
      ObjectSetInteger(NULL, "range end", OBJPROP_BACK, true);
   }

   // Close time
   ObjectDelete(NULL, "range close");
   if (range.close_time > 0) {
      ObjectCreate(NULL, "range close", OBJ_VLINE, 0, range.close_time, 0);
      ObjectSetString(NULL, "range close", OBJPROP_TOOLTIP, "Close of the range \n" + TimeToString(range.close_time, TIME_DATE | TIME_MINUTES));
      ObjectSetInteger(NULL, "range close", OBJPROP_COLOR, clrRed);
      ObjectSetInteger(NULL, "range close", OBJPROP_WIDTH, 2);
      ObjectSetInteger(NULL, "range close", OBJPROP_BACK, true);
   }

   // High
   ObjectsDeleteAll(NULL, "range high");
   if (range.high > 0) {
      ObjectCreate(NULL, "range high", OBJ_TREND, 0, range.start_time, range.high, range.close_time, range.high);
      ObjectSetString(NULL, "range high", OBJPROP_TOOLTIP, "High of the range\n" + DoubleToString(range.high, _Digits));
      ObjectSetInteger(NULL, "range high", OBJPROP_COLOR, clrGreen);
      ObjectSetInteger(NULL, "range high", OBJPROP_WIDTH, 2);
      ObjectSetInteger(NULL, "range high", OBJPROP_BACK, true);
   }

   // Low
   ObjectsDeleteAll(NULL, "range low");
   if (range.low < DBL_MAX) {
      ObjectCreate(NULL, "range low", OBJ_TREND, 0, range.start_time, range.low, range.close_time, range.low);
      ObjectSetString(NULL, "range low", OBJPROP_TOOLTIP, "Low of the range\n" + DoubleToString(range.low, _Digits));
      ObjectSetInteger(NULL, "range low", OBJPROP_COLOR, clrRed);
      ObjectSetInteger(NULL, "range low", OBJPROP_WIDTH, 2);
      ObjectSetInteger(NULL, "range low", OBJPROP_BACK, true);
   }

   // Refresh chart
   ChartRedraw();
}

//+------------------------------------------------------------------+
//| Check user inputs                                                |
//+------------------------------------------------------------------+
bool CheckInputs() {
   if (InpRangeStart < 0 || InpRangeStart >= 1440) {
      Alert("Range start < 0 or >= 1440");
      return false;
   }
   if (InpRangeDuration <= 0 || InpRangeDuration >= 1440) {
      Alert("Range duration <= 0 or >= 1440");
      return false;
   }
   if (InpRangeClose >= 1440 || (InpRangeStart + InpRangeDuration) % 1440 == InpRangeClose) {
      Alert("Close time >= 1440 or end time == close time");
      return false;
   }
   if (InpMonday + InpTuesday + InpWednesday + InpThursday + InpFriday == 0) {
      Alert("Range is prohibited on all days of the week");
      return false;
   }
   return true;
}

//+------------------------------------------------------------------+
//| Calculate a new range                                            |
//+------------------------------------------------------------------+
void CalculateRange() {
   // Reset range variable
   range.start_time = 0;
   range.end_time = 0;
   range.close_time = 0;
   range.high = 0.0;
   range.low = DBL_MAX;
   range.f_entry = false;

   // Calculate range start time
   int time_cycle = 86400;
   range.start_time = (lastTick.time - (lastTick.time % time_cycle)) + InpRangeStart * 60;
   for (int i = 0; i < 8; i++) {
      MqlDateTime tmp;
      TimeToStruct(range.start_time, tmp);
      int dow = tmp.day_of_week;
      if (lastTick.time >= range.start_time || dow == 6 || dow == 0 || (dow == 1 && !InpMonday) || (dow == 2 && !InpTuesday) || (dow == 3 && !InpWednesday) || (dow == 4 && !InpThursday) || (dow == 5 && !InpFriday)) {
         range.start_time += time_cycle;
      }
   }

   // Calculate range end time
   range.end_time = range.start_time + InpRangeDuration * 60;
   for (int i = 0; i < 2; i++) {
      MqlDateTime tmp;
      TimeToStruct(range.end_time, tmp);
      int dow = tmp.day_of_week;
      if (dow == 6 || dow == 0) {
         range.end_time += time_cycle;
      }
   }

   // Calculate range close time (only if InpRangeClose is enabled)
   if (InpRangeClose >= 0) {
      range.close_time = (range.end_time - (range.end_time % time_cycle)) + InpRangeClose * 60;
      for (int i = 0; i < 3; i++) {
         MqlDateTime tmp;
         TimeToStruct(range.close_time, tmp);
         int dow = tmp.day_of_week;
         if (range.close_time <= range.end_time || dow == 6 || dow == 0) {
            range.close_time += time_cycle;
         }
      }
   } else {
      range.close_time = 0; // Disable close time
   }

   // DRAW OBJECTS
   DrawObjects();
}
